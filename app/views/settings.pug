extends layout

block content
  body(style='height:auto;margin-top:30px;')
    .container-fluid.d-flex.h-100
      .d-flex.justify-content-center.align-self-center.margin-center.innerBG.flex-column
        .d-flex.flex-row
          .p-2
            h1
              | #
              b.pink= title
          .ml-auto.p-2.align-self-center
            a.shortbutton(href='/logout')= logout
        h5.p-2.text-white.mb-0 Settings
        .d-flex.flex-column
          .d-flex.flex-row.listItem.rounded-top
            .p-2 Disable Cloud
            .ml-auto.p-2
              input.checkbox-switch-disablecloud(type='checkbox')
          .d-flex.flex-row.listItem
            .p-2 Recording without Cloud
            .ml-auto.p-2
              input.checkbox-switch-recwocloud(type='checkbox')
          .d-flex.flex-row.listItem
            .p-2 Proxychains-ng
            .ml-auto.p-2
              input.checkbox-switch-proxychains(type='checkbox')
          .d-flex.flex-row.listItem
            .p-2 SSH
            .ml-auto.p-2
              input.checkbox-switch-ssh(type='checkbox')
          .d-flex.flex-row.listItem
            .p-2 FTP
            .ml-auto.p-2
              input.checkbox-switch-ftp(type='checkbox')
          .d-flex.flex-row.listItem
            .p-2 Telnet
            .ml-auto.p-2
              input.checkbox-switch-telnet(type='checkbox')
          .d-flex.flex-row.listItem.rounded-bottom
            .p-2 NTPD
            .ml-auto.p-2
              input.checkbox-switch-ntpd(type='checkbox')
        a.p-2.longbutton.mb-3.mt-3(href='/stream/' + title) Back
    script(type='text/javascript', src='/javascripts/jsmpeg.min.js')
    script(type='text/javascript').
     
      let loaded;
      let conf = !{config};
          
      let disablecloud = document.querySelector('.checkbox-switch-disablecloud');
      disablecloud = new Switch(disablecloud, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.dcState = disablecloud.getChecked();    
         },
         onChange: function(){
           if(disablecloud.getChecked() !== this.dcState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'disablecloud', val: disablecloud.getChecked()})
             conf.disablecloud = disablecloud.getChecked();
           }
         }
      });
   
      let recwocloud = document.querySelector('.checkbox-switch-recwocloud');
      recwocloud = new Switch(recwocloud, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.rwcState = recwocloud.getChecked();    
         },
         onChange: function(){
           if(recwocloud.getChecked() !== this.rwcState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'recwocloud', val: recwocloud.getChecked()})
             conf.recwocloud = recwocloud.getChecked();
           }
         }
      });
     
      let proxychains = document.querySelector('.checkbox-switch-proxychains');
      proxychains = new Switch(proxychains, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.pcState = proxychains.getChecked();    
         },
         onChange: function(){
           if(proxychains.getChecked() !== this.pcState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'proxychains', val: proxychains.getChecked()})
             conf.proxychains = proxychains.getChecked();
           }
         }
      });
     
      let ssh = document.querySelector('.checkbox-switch-ssh');
      ssh = new Switch(ssh, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.sshState = ssh.getChecked();    
         },
         onChange: function(){
           if(ssh.getChecked() !== this.sshState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'ssh', val: ssh.getChecked()})
             conf.ssh = ssh.getChecked();
           }
         }
      });
     
      let ftp = document.querySelector('.checkbox-switch-ftp');
      ftp = new Switch(ftp, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.ftpState = ftp.getChecked();    
         },
         onChange: function(){
           if(ftp.getChecked() !== this.ftpState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'ftp', val: ftp.getChecked()})
             conf.ftp = ftp.getChecked();
           }
         }
      });
      
      let telnet = document.querySelector('.checkbox-switch-telnet');
      telnet = new Switch(telnet, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.tnState = telnet.getChecked();    
         },
         onChange: function(){
           if(telnet.getChecked() !== this.tnState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'telnet', val: telnet.getChecked()})
             conf.telnet = telnet.getChecked();
           }
         }
      });
     
      let ntpd = document.querySelector('.checkbox-switch-ntpd');
      ntpd = new Switch(ntpd, {
         size: 'small',
         onSwitchColor: '#d12049',
         beforeChange: function(){
           this.ntpdState = ntpd.getChecked();    
         },
         onChange: function(){
           if(ntpd.getChecked() !== this.ntpdState && !loaded){
             $.post('/stream/!{title}/settings',{dest:'ntpd', val: ntpd.getChecked()})
             conf.ntpd = ntpd.getChecked();
           }
         }
      });
     
      function refreshConfig(){
        
        if(conf.disablecloud){
          disablecloud.on();
        } else {
         disablecloud.off(); 
        }

        if(conf.recwocloud){
          recwocloud.on();
        } else {
         recwocloud.off(); 
        }

        if(conf.proxychains){
          proxychains.on();
        } else {
         proxychains.off(); 
        }
 
        if(conf.ssh){
          ssh.on(); 
        } else {
         ssh.off(); 
        }
        
        if(conf.ftp){
          ftp.on();
        } else {
         ftp.off(); 
        }

        if(conf.telnet){
          telnet.on();
        } else {
         telnet.off(); 
        }
          
        if(conf.ntpd){
          ntpd.on(); 
        } else {
         ntpd.off(); 
        }
        
        setTimeout(function(){
            loaded = false;
            refreshConfig();
        }, 15000);
        
      }
      $(document).ready(function () {    
         
         loaded = true;
         
         refreshConfig();
          
      });